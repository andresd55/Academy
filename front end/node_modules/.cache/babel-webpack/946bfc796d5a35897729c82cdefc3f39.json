{"ast":null,"code":"import { ObjectUtils } from '../utils/public_api';\nimport * as i0 from \"@angular/core\";\nexport let FilterService = /*#__PURE__*/(() => {\n  class FilterService {\n    constructor() {\n      this.filters = {\n        startsWith: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null || filter.trim() === '') {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          let filterValue = ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);\n          let stringValue = ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);\n          return stringValue.slice(0, filterValue.length) === filterValue;\n        },\n        contains: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          let filterValue = ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);\n          let stringValue = ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);\n          return stringValue.indexOf(filterValue) !== -1;\n        },\n        notContains: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          let filterValue = ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);\n          let stringValue = ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);\n          return stringValue.indexOf(filterValue) === -1;\n        },\n        endsWith: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null || filter.trim() === '') {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          let filterValue = ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);\n          let stringValue = ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);\n          return stringValue.indexOf(filterValue, stringValue.length - filterValue.length) !== -1;\n        },\n        equals: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          if (value.getTime && filter.getTime) return value.getTime() === filter.getTime();else return ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale) == ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);\n        },\n        notEquals: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {\n            return false;\n          }\n\n          if (value === undefined || value === null) {\n            return true;\n          }\n\n          if (value.getTime && filter.getTime) return value.getTime() !== filter.getTime();else return ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale) != ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);\n        },\n        in: (value, filter) => {\n          if (filter === undefined || filter === null || filter.length === 0) {\n            return true;\n          }\n\n          for (let i = 0; i < filter.length; i++) {\n            if (ObjectUtils.equals(value, filter[i])) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        between: (value, filter) => {\n          if (filter == null || filter[0] == null || filter[1] == null) {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          if (value.getTime) {\n            return filter[0].getTime() <= value.getTime() && value.getTime() <= filter[1].getTime();\n          } else {\n            return filter[0] <= value && value <= filter[1];\n          }\n        },\n        lt: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null) {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          if (value.getTime && filter.getTime) return value.getTime() < filter.getTime();else return value < filter;\n        },\n        lte: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null) {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          if (value.getTime && filter.getTime) return value.getTime() <= filter.getTime();else return value <= filter;\n        },\n        gt: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null) {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          if (value.getTime && filter.getTime) return value.getTime() > filter.getTime();else return value > filter;\n        },\n        gte: (value, filter, filterLocale) => {\n          if (filter === undefined || filter === null) {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          if (value.getTime && filter.getTime) return value.getTime() >= filter.getTime();else return value >= filter;\n        },\n        is: (value, filter, filterLocale) => {\n          return this.filters.equals(value, filter, filterLocale);\n        },\n        isNot: (value, filter, filterLocale) => {\n          return this.filters.notEquals(value, filter, filterLocale);\n        },\n        before: (value, filter, filterLocale) => {\n          return this.filters.lt(value, filter, filterLocale);\n        },\n        after: (value, filter, filterLocale) => {\n          return this.filters.gt(value, filter, filterLocale);\n        },\n        dateIs: (value, filter) => {\n          if (filter === undefined || filter === null) {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          return value.toDateString() === filter.toDateString();\n        },\n        dateIsNot: (value, filter) => {\n          if (filter === undefined || filter === null) {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          return value.toDateString() !== filter.toDateString();\n        },\n        dateBefore: (value, filter) => {\n          if (filter === undefined || filter === null) {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          return value.getTime() < filter.getTime();\n        },\n        dateAfter: (value, filter) => {\n          if (filter === undefined || filter === null) {\n            return true;\n          }\n\n          if (value === undefined || value === null) {\n            return false;\n          }\n\n          return value.getTime() > filter.getTime();\n        }\n      };\n    }\n\n    filter(value, fields, filterValue, filterMatchMode, filterLocale) {\n      let filteredItems = [];\n\n      if (value) {\n        for (let item of value) {\n          for (let field of fields) {\n            let fieldValue = ObjectUtils.resolveFieldData(item, field);\n\n            if (this.filters[filterMatchMode](fieldValue, filterValue, filterLocale)) {\n              filteredItems.push(item);\n              break;\n            }\n          }\n        }\n      }\n\n      return filteredItems;\n    }\n\n    register(rule, fn) {\n      this.filters[rule] = fn;\n    }\n\n  }\n\n  FilterService.ɵfac = function FilterService_Factory(t) {\n    return new (t || FilterService)();\n  };\n\n  FilterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FilterService,\n    factory: FilterService.ɵfac,\n    providedIn: 'root'\n  });\n  return FilterService;\n})();","map":null,"metadata":{},"sourceType":"module"}