{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport * as moment from 'moment';\nimport { httpTranslateLoader } from '../../primeng/paginator/paginator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"src/app/core/services/storage/storage.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\n\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nexport let DatepickerComponent = /*#__PURE__*/(() => {\n  class DatepickerComponent {\n    constructor(translate, storageService) {\n      this.translate = translate;\n      this.storageService = storageService;\n      this.right = '24';\n    }\n\n    ngAfterContentChecked() {//console.log(\"ngAfterContentChecked\")\n      //this.ConfigureDatePicker()\n    }\n\n    ngAfterViewInit() {\n      $.datepicker.setDefaults($.datepicker.regional[this.storageService.getLanguage()]);\n    }\n\n    ngOnInit() {\n      $.datepicker.setDefaults($.datepicker.regional[this.storageService.getLanguage()]);\n      moment.locale(this.storageService.getLanguage());\n      this.defaults = {\n        isRange: false,\n        ids: ['datepicker'],\n        labels: ['Fecha 1'],\n        dateFormat: 'yy-mm-dd',\n        required: false,\n        maxDate: null,\n        minDate: null\n      };\n      this.settings = Object.assign({}, this.defaults, this.config);\n      this.isConfigured = false;\n      const that = this;\n      $(function () {\n        $('.datepicker').css('right', that.right + 'px');\n      });\n    }\n\n    get f() {\n      return this.form.controls;\n    }\n\n    IsValid(control) {\n      return this.form.get(control).valid;\n    }\n\n    onKey() {\n      return false;\n    }\n\n    ConfigureDatePicker() {\n      if (!this.isConfigured) {\n        if (!this.settings.isRange) {\n          this._SingleDatePicker();\n        } else {\n          this._RangeDatePicker();\n        }\n\n        this.isConfigured = true;\n      }\n    }\n\n    OnDateSelect(event) {\n      const el = event.target;\n      this.form.get(el.name).setValue(el.value);\n    }\n\n    _SingleDatePicker() {\n      const el = $('#' + this.settings.ids[0]);\n      el.datepicker({\n        minDate: this.settings.minDate,\n        changeMonth: true,\n        changeYear: true,\n        dateFormat: this.settings.dateFormat,\n        maxDate: this.settings.maxDate,\n        showOtherMonths: true,\n        selectOtherMonths: true,\n        showButtonPanel: true,\n\n        onSelect(dateText, inst) {\n          const evt = document.createEvent('HTMLEvents');\n          evt.initEvent('change', false, true);\n          inst.input[0].dispatchEvent(evt);\n          el.trigger('change');\n        }\n\n      });\n    }\n\n    _RangeDatePicker() {\n      const el = $('#' + this.settings.ids[0]); //$.datepicker.setDefaults($.datepicker.regional[this.storageService.getLanguage()]);\n\n      el.datepicker({\n        minDate: this.settings.minDate,\n        changeMonth: true,\n        numberOfMonths: 2,\n        changeYear: true,\n        dateFormat: this.settings.dateFormat,\n        maxDate: this.settings.maxDate,\n        showOtherMonths: true,\n        selectOtherMonths: true,\n        showButtonPanel: true,\n        onSelect: function (selectedDate, inst) {\n          if (!$(this).data().datepicker.first) {\n            $(this).data().datepicker.inline = true;\n            $(this).data().datepicker.first = selectedDate;\n          } else {\n            let selectDate = moment(selectedDate, \"MMM/DD/YYYY\").format(\"YYYY-MM-DD\");\n            let firstDate = moment($(this).data().datepicker.first, \"MMM/DD/YYYY\").format(\"YYYY-MM-DD\");\n\n            if (selectDate > firstDate) {\n              $(this).val($(this).data().datepicker.first + \" - \" + selectedDate);\n            } else {\n              $(this).val(selectedDate + \" - \" + $(this).data().datepicker.first);\n            }\n\n            $(this).data().datepicker.inline = false;\n          }\n\n          const evt = document.createEvent('HTMLEvents');\n          evt.initEvent('change', false, true);\n          inst.input[0].dispatchEvent(evt);\n          el.trigger('change');\n        },\n        onClose: function () {\n          delete $(this).data().datepicker.first;\n          $(this).data().datepicker.inline = false;\n        }\n      });\n    }\n\n  }\n\n  DatepickerComponent.ɵfac = function DatepickerComponent_Factory(t) {\n    return new (t || DatepickerComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.StorageService));\n  };\n\n  DatepickerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DatepickerComponent,\n    selectors: [[\"app-datepicker\"]],\n    inputs: {\n      right: \"right\",\n      config: \"config\",\n      form: \"form\",\n      formDirective: \"formDirective\",\n      submitted: \"submitted\",\n      subGroupClicked: \"subGroupClicked\",\n      readonly: \"readonly\",\n      styleHTML: \"styleHTML\"\n    },\n    decls: 12,\n    vars: 21,\n    consts: [[3, \"formGroup\"], [1, \"datepicker-obj\", \"row\", \"p-0\", \"m-0\"], [3, \"for\"], [\"type\", \"text\", \"autocomplete\", \"off\", 1, \"inputs\", \"is-valid-preload\", \"date-icon\", 3, \"formControlName\", \"placeholder\", \"id\", \"name\", \"readonly\", \"ngClass\", \"keypress\", \"change\"], [1, \"far\", \"fa-calendar\", \"datepicker\"], [1, \"invalid-feedback\", \"mb-2\"]],\n    template: function DatepickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"label\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵpipe(4, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"input\", 3);\n        i0.ɵɵlistener(\"keypress\", function DatepickerComponent_Template_input_keypress_5_listener() {\n          return ctx.onKey();\n        })(\"change\", function DatepickerComponent_Template_input_change_5_listener($event) {\n          return ctx.OnDateSelect($event);\n        });\n        i0.ɵɵpipe(6, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"em\", 4);\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵtext(9);\n        i0.ɵɵpipe(10, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassMap(ctx.settings.required ? \"label-required\" : \"\");\n        i0.ɵɵpropertyInterpolate(\"for\", ctx.settings.ids[0]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 13, ctx.settings.labels), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"formControlName\", ctx.settings.ids[0]);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(6, 15, \"checkOut.lblSelectadate\"));\n        i0.ɵɵpropertyInterpolate(\"id\", ctx.settings.ids[0]);\n        i0.ɵɵproperty(\"name\", ctx.settings.ids[0])(\"readonly\", ctx.readonly)(\"ngClass\", i0.ɵɵpureFunction1(19, _c0, ctx.submitted && !ctx.IsValid(ctx.settings.ids[0])));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(10, 17, \"formsGeneral.lblMandatoryField\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.ConfigureDatePicker(), \" \");\n      }\n    },\n    directives: [i3.NgControlStatusGroup, i3.FormGroupDirective, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i4.NgClass],\n    pipes: [i1.TranslatePipe],\n    encapsulation: 2\n  });\n  return DatepickerComponent;\n})();\nexport let DatepickerComponentModule = /*#__PURE__*/(() => {\n  class DatepickerComponentModule {}\n\n  DatepickerComponentModule.ɵfac = function DatepickerComponentModule_Factory(t) {\n    return new (t || DatepickerComponentModule)();\n  };\n\n  DatepickerComponentModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: DatepickerComponentModule\n  });\n  DatepickerComponentModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: httpTranslateLoader,\n        deps: [HttpClient]\n      }\n    })]]\n  });\n  return DatepickerComponentModule;\n})();","map":null,"metadata":{},"sourceType":"module"}